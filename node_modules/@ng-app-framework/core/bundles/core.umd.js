(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Rx')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Rx'], factory) :
	(factory((global.core = {}),global.ng.core,global.rxjs));
}(this, (function (exports,core,Rx) { 'use strict';

var Value = /** @class */ (function () {
    function Value() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isProvided = function (value) {
        return value !== undefined && value !== null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isScalar = function (value) {
        return (/string|number|boolean/).test(typeof value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isNumber = function (value) {
        return this.isNotNull(value) && this.isTypeOf(Number, value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isBoolean = function (value) {
        return this.isNotNull(value) && this.isTypeOf(Boolean, value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isString = function (value) {
        return this.isNotNull(value) && this.isTypeOf(String, value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isArray = function (value) {
        return Array.isArray(value);
    };
    /**
     * @param {?} instance
     * @param {?} of
     * @return {?}
     */
    Value.isInstanceOf = function (instance, of) {
        if (of === Object && Value.isArray(instance)) {
            return false;
        }
        return this.isSameClassAs(instance, of) || instance instanceof of;
    };
    /**
     * @param {?} instance
     * @param {?} otherClass
     * @return {?}
     */
    Value.isSameClassAs = function (instance, otherClass) {
        return this.isNotNull(instance) && instance['constructor'] !== undefined && instance.constructor === otherClass;
    };
    /**
     * @param {?} type
     * @param {?} value
     * @return {?}
     */
    Value.isTypeOf = function (type, value) {
        if (!this.isNotNull(value)) {
            return false;
        }
        if (this.isSameClassAs(value, type)) {
            return true;
        }
        if (this.isScalarType(type)) {
            return this.isScalar(value) && this.isSameClassAs(value, type);
        }
        return !this.isScalar(value)
            && !this.isArray(value)
            && this.isInstanceOf(value, type);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.hasArrayElements = function (value) {
        return this.isNotNull(value) && this.isArray(value) && this.hasLength(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.hasProperties = function (value) {
        return this.isNotNull(value) && !this.isArray(value) && this.isInstanceOf(value, Object) && Object.keys(value).length > 0;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isNotNull = function (value) {
        return value !== undefined && value !== null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.isDefined = function (value) {
        return value !== undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.hasLength = function (value) {
        return Value.isProvided(value) && Value.isDefined(value.length) && value.length > 0;
    };
    /**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    Value.hasKey = function (value, key) {
        return this.isDefined(value[key]);
    };
    /**
     * @param {?} container
     * @param {?} value
     * @return {?}
     */
    Value.contains = function (container, value) {
        return (Value.isArray(container) || Value.isString(value)) && container.indexOf(value) > -1;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    Value.isScalarType = function (type) {
        return type === String || type === Number || type === Boolean;
    };
    /**
     * @param {?} value
     * @param {?=} defaultValue
     * @return {?}
     */
    Value.coalesce = function (value, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (Value.isString(value) && !Value.hasLength(value)) {
            return defaultValue;
        }
        return Value.isProvided(value) ? value : defaultValue;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.getDateAsString = function (value) {
        if (!Value.isProvided(value) || !Value.isSameClassAs(value, Date)) {
            return '';
        }
        var /** @type {?} */ dateString = this.getDatePaddedValue(value.getDate());
        var /** @type {?} */ monthString = this.getDatePaddedValue(value.getMonth() + 1);
        var /** @type {?} */ yearString = value.getFullYear();
        return yearString + "-" + monthString + "-" + dateString;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Value.getDatePaddedValue = function (value) {
        return value.toString().length === 2 ? '' + value : "0" + value;
    };
    return Value;
}());
var WindowEvents = /** @class */ (function () {
    function WindowEvents() {
        this.onMessage = new core.EventEmitter();
    }
    /**
     * @param {?} window
     * @return {?}
     */
    WindowEvents.prototype.listen = function (window) {
        var _this = this;
        if (Value.isDefined(window.addEventListener)) {
            window.addEventListener('message', function (event) {
                _this.onMessage.emit(event);
            });
        }
    };
    return WindowEvents;
}());
WindowEvents.decorators = [
    { type: core.Injectable },
];
/**
 * @nocollapse
 */
WindowEvents.ctorParameters = function () { return []; };
var NgCoreModule = /** @class */ (function () {
    /**
     * @param {?} events
     */
    function NgCoreModule(events) {
        events.listen(window);
    }
    return NgCoreModule;
}());
NgCoreModule.decorators = [
    { type: core.NgModule, args: [{
                providers: [
                    WindowEvents
                ]
            },] },
];
/**
 * @nocollapse
 */
NgCoreModule.ctorParameters = function () { return [
    { type: WindowEvents, },
]; };
/**
 * @param {?} target
 * @param {?} key
 * @return {?}
 */
function OnChange(target, key) {
    return {
        set: function (value) {
            var /** @type {?} */ hasChanged = this['_' + key] !== value;
            this['_' + key] = value;
            if (hasChanged && Value.isInstanceOf(this[key + 'Change'], core.EventEmitter)) {
                this[key + 'Change'].emit(value);
            }
        },
        get: function () {
            if (this['_' + key] === undefined) {
                target['_' + key] = target[key];
            }
            return this['_' + key];
        },
        enumerable: true,
        configurable: true
    };
}
var Async = /** @class */ (function () {
    function Async() {
    }
    /**
     * @param {?} elements
     * @param {?} doThis
     * @return {?}
     */
    Async.forEach$ = function (elements, doThis) {
        return Rx.Observable.from(elements)
            .map(function (element, index) {
            doThis(element, index);
            return element;
        });
    };
    /**
     * @param {?} elements
     * @param {?} mapTo
     * @return {?}
     */
    Async.map$ = function (elements, mapTo) {
        return Rx.Observable.from(elements)
            .map(function (option, index) { return mapTo(option, index); });
    };
    /**
     * @param {?} observables
     * @return {?}
     */
    Async.merge$ = function (observables) {
        return Rx.Observable.merge.apply(Rx.Observable, observables);
    };
    /**
     * @param {?} elements
     * @param {?} filterBy
     * @return {?}
     */
    Async.filter$ = function (elements, filterBy) {
        return Rx.Observable.from(elements)
            .filter(function (option, index) { return filterBy(option, index); });
    };
    /**
     * @param {?} elements
     * @param {?} mapTo
     * @return {?}
     */
    Async.mapToObservable$ = function (elements, mapTo) {
        return Rx.Observable.from(elements)
            .flatMap(function (element, index) { return mapTo(element, index); });
    };
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    Async.getObservableForValue$ = function (value) {
        return Rx.Observable.of(value);
    };
    /**
     * @param {?} observable
     * @param {?} condition
     * @param {?} then$
     * @param {?=} else$
     * @return {?}
     */
    Async.ifThenElse$ = function (observable, condition, then$, else$) {
        return observable.flatMap(function (value) {
            if (condition(value)) {
                return then$(value);
            }
            return else$ ? else$(value) : Rx.Observable.empty();
        });
    };
    return Async;
}());
var ObjectCombiner = /** @class */ (function () {
    function ObjectCombiner() {
    }
    /**
     * @param {?} baseObject
     * @param {?} otherObject
     * @param {?=} omitKeys
     * @return {?}
     */
    ObjectCombiner.combine = function (baseObject, otherObject, omitKeys) {
        if (omitKeys === void 0) { omitKeys = []; }
        Object.keys(baseObject)
            .filter(function (key) { return Value.isNotNull(otherObject[key]); })
            .filter(function (key) { return !Value.contains(omitKeys, key); })
            .forEach(function (key) {
            baseObject[key] = otherObject[key];
        });
    };
    return ObjectCombiner;
}());
var SiteConfig = /** @class */ (function () {
    function SiteConfig() {
    }
    return SiteConfig;
}());
SiteConfig.theme = '';
SiteConfig.contactUrl = '';
SiteConfig.logoUrl = '';
SiteConfig.unableToConnectMessage = "Unable to connect to remote server. Please <a href='" + SiteConfig.contactUrl + "'>contact support</a>.";
var StringValue = /** @class */ (function () {
    function StringValue() {
    }
    /**
     * @param {?} target
     * @param {?} stringToReplace
     * @param {?} replacement
     * @return {?}
     */
    StringValue.replace = function (target, stringToReplace, replacement) {
        var /** @type {?} */ escaped = this.escapeCharacters(stringToReplace);
        var /** @type {?} */ escapedReplacement = this.escapeDollarSigns(replacement);
        return target.replace(new RegExp(escaped, 'g'), escapedReplacement);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    StringValue.escapeDollarSigns = function (string) {
        return string.replace(/\$/g, '$$$$');
    };
    /**
     * @param {?} string
     * @return {?}
     */
    StringValue.escapeCharacters = function (string) {
        return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StringValue.isVowel = function (value) {
        return /[aeiouAEIOU]/.test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StringValue.startsWithAVowel = function (value) {
        return this.isPopulated(value) && this.isVowel(value[0]);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StringValue.isPopulated = function (value) {
        return Value.isString(value) && Value.hasLength(value);
    };
    return StringValue;
}());
var UnsubscribeAll = new core.EventEmitter();
var ValueInterpreter = /** @class */ (function () {
    /**
     * @param {?} valueProperty
     */
    function ValueInterpreter(valueProperty) {
        this.valueProperty = valueProperty;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ValueInterpreter.prototype.getValueOfObject = function (obj) {
        if (Value.isDefined(obj[this.valueProperty])) {
            return obj[this.valueProperty];
        }
        return obj;
    };
    return ValueInterpreter;
}());
var ValueMapper = /** @class */ (function () {
    function ValueMapper() {
        this.propertyMap = {};
    }
    /**
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    ValueMapper.prototype.addMap = function (from, to) {
        this.propertyMap[from] = to;
    };
    /**
     * @template T
     * @param {?} oldObject
     * @return {?}
     */
    ValueMapper.prototype.mapToNewObject = function (oldObject) {
        var /** @type {?} */ obj = ({});
        for (var /** @type {?} */ key in this.propertyMap) {
            if (Value.isNotNull(oldObject[key])) {
                this.mapByKey(obj, key, oldObject);
            }
        }
        return obj;
    };
    /**
     * @param {?} newObject
     * @param {?} key
     * @param {?} oldObject
     * @return {?}
     */
    ValueMapper.prototype.mapByKey = function (newObject, key, oldObject) {
        newObject[this.propertyMap[key]] = oldObject[key];
    };
    return ValueMapper;
}());

exports.NgCoreModule = NgCoreModule;
exports.OnChange = OnChange;
exports.Async = Async;
exports.ObjectCombiner = ObjectCombiner;
exports.SiteConfig = SiteConfig;
exports.StringValue = StringValue;
exports.UnsubscribeAll = UnsubscribeAll;
exports.Value = Value;
exports.ValueInterpreter = ValueInterpreter;
exports.ValueMapper = ValueMapper;
exports.WindowEvents = WindowEvents;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=core.umd.js.map
