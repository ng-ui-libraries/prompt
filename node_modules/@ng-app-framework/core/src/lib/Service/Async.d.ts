import { Observable } from "rxjs/Rx";
export interface PipeCallback {
    (element: any, index?: number): any;
}
export interface BooleanPipeCallback extends PipeCallback {
    (element: any, index?: number): boolean;
}
export interface VoidPipeCallback extends PipeCallback {
    (element: any, index?: number): void;
}
export interface ObservablePipeCallback extends PipeCallback {
    (element: any, index?: number): Observable<any>;
}
export declare class Async {
    static forEach$(elements: any[], doThis: VoidPipeCallback): Observable<any>;
    static map$(elements: any[], mapTo: PipeCallback): Observable<any>;
    static merge$(observables: Observable<any>[]): Observable<any>;
    static filter$(elements: any[], filterBy: BooleanPipeCallback): Observable<any>;
    static mapToObservable$(elements: any[], mapTo: ObservablePipeCallback): Observable<any>;
    static getObservableForValue$<T>(value: T): Observable<T>;
    static ifThenElse$(observable: Observable<any>, condition: BooleanPipeCallback, then$: ObservablePipeCallback, else$?: ObservablePipeCallback): Observable<any>;
}
